// prisma/schema.prisma
datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

generator client {
  provider = "prisma-client-js"
}

/**
 * ================== NEXT-AUTH (PrismaAdapter için zorunlu) ==================
 */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ================== KULLANICI / ÇOKLU MAĞAZA (TENANT) ==================
 */
model User {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String?
  email        String   @unique @db.VarChar(191)
  passwordHash String
  role         UserRole @default(STAFF)

  // NextAuth
  accounts Account[]
  sessions Session[]

  // Bu kullanıcının oluşturduğu siparişler
  orders Order[] @relation("OrderCreatedBy")

  // Bu kullanıcının oluşturduğu tenant'lar
  tenantsOwned Tenant[] @relation("TenantCreatedBy")

  // Üyelikleri
  memberships Membership[]

  @@index([email])
  @@index([role])
}

enum UserRole {
  ADMIN
  STAFF
}

model Tenant {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())
  name      String

  createdById String
  createdBy   User   @relation("TenantCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  memberships Membership[]
  customers   Customer[]
  categories  Category[]
  variants    Variant[]
  orders      Order[]
  // İstersen aç: @@unique([name, createdById])

  @@index([createdById])
}

model Membership {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  userId   String
  tenantId String
  role     TenantRole @default(OWNER)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([tenantId])
}

enum TenantRole {
  OWNER
  ADMIN
  STAFF
}

/**
 * ================== MÜŞTERİ ==================
 */
model Customer {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name    String
  phone   String
  email   String? @db.VarChar(191)
  address String?
  note    String?

  orders Order[]

  @@unique([tenantId, phone]) // aynı telefon aynı tenant'ta tek
  @@index([tenantId])
  @@index([tenantId, name])
}

/**
 * ================== KATALOG ==================
 */
model Category {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  name       String
  variants   Variant[]
  orderItems OrderItem[]

  @@unique([tenantId, name])
  @@index([tenantId])
}

model Variant {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  name       String
  unitPrice  Decimal     @default(0) @db.Decimal(12, 2)
  categoryId String
  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@unique([categoryId, name]) // kategori içinde isim tekil
  @@index([tenantId])
  @@index([categoryId])
  @@index([name])
}

/**
 * ================== SİPARİŞ ==================
 */
model Order {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  note      String?

  // Toplamlar
  total    Decimal @default(0) @db.Decimal(12, 2) // kalemler+ekstralar
  discount Decimal @default(0) @db.Decimal(12, 2) // TL iskonto
  netTotal Decimal @default(0) @db.Decimal(12, 2) // total - discount

  // Snapshot müşteri (fiş gibi)
  customerName  String @default("")
  customerPhone String @default("")

  status OrderStatus @default(pending)

  // Opsiyonel ilişki: Customer
  customerId String?
  customer   Customer? @relation(fields: [customerId], references: [id], onDelete: SetNull)

  // Opsiyonel: siparişi oluşturan kullanıcı
  createdById String?
  createdBy   User?   @relation("OrderCreatedBy", fields: [createdById], references: [id], onDelete: SetNull)

  items  OrderItem[]
  extras OrderExtra[] // ücretli STOR/AKSESUAR kalemleri

  // Eski serbest metin alanları (raporlara katılmaz)
  storLines      Json?
  accessoryLines Json?

  @@index([tenantId, createdAt])
  @@index([tenantId, status, createdAt])
  @@index([tenantId, customerId])
  @@index([tenantId, customerName])
  @@index([tenantId, customerPhone])
  @@index([tenantId, createdById])
}

enum OrderStatus {
  pending
  processing
  completed
  cancelled
}

/**
 * m² * fileDensity * unitPrice
 */
model OrderItem {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  categoryId String
  category   Category @relation(fields: [categoryId], references: [id])

  variantId String
  variant   Variant @relation(fields: [variantId], references: [id])

  qty         Int
  width       Int // cm
  height      Int // cm
  unitPrice   Decimal @default(0) @db.Decimal(12, 2)
  fileDensity Decimal @default(1) @db.Decimal(3, 1) // 1.0, 1.5, 2.0, ...

  subtotal Decimal @default(0) @db.Decimal(12, 2)
  note     String?

  @@index([orderId])
  @@index([categoryId])
  @@index([variantId])
}

/**
 * Adet * Birim Fiyat
 */
model OrderExtra {
  id      String @id @default(cuid())
  orderId String
  order   Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)

  type      ExtraType // STOR | ACCESSORY
  text      String
  qty       Int       @default(1)
  unitPrice Decimal   @default(0) @db.Decimal(12, 2)
  subtotal  Decimal   @default(0) @db.Decimal(12, 2) // qty * unitPrice
  note      String?

  createdAt DateTime @default(now())

  @@index([orderId, type])
}

enum ExtraType {
  STOR
  ACCESSORY
}
