// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

/**
 * ============ Auth ============
 */
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, expires])
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

/**
 * ============ Core ============
 */
model User {
  id                 String   @id @default(cuid())
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
  name               String?
  email              String   @unique @db.VarChar(191)
  username           String   @unique
  passwordHash       String
  role               UserRole @default(STAFF)
  isActive           Boolean  @default(true)
  mustChangePassword Boolean  @default(true)

  billingNextDueAt    DateTime?
  billingPaidForMonth DateTime?

  accounts     Account[]
  memberships  Membership[]
  orders       Order[]      @relation("OrderCreatedBy")
  sessions     Session[]
  tenantsOwned Tenant[]     @relation("TenantCreatedBy")

  // ⬇️ BACK-RELATION: Ödemeleri oluşturan kullanıcı
  paymentsCreated OrderPayment[]       @relation("OrderPaymentCreatedBy")
  resetTokens     PasswordResetToken[]

  @@index([email])
  @@index([role])
  @@index([username])
}

model Membership {
  id        String     @id @default(cuid())
  createdAt DateTime   @default(now())
  userId    String
  tenantId  String
  role      TenantRole @default(STAFF)

  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@unique([userId, tenantId])
  @@index([tenantId])
  @@index([tenantId, role])
}

model Tenant {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())
  name        String
  createdById String
  createdBy   User     @relation("TenantCreatedBy", fields: [createdById], references: [id], onDelete: Cascade)

  branches       Branch[]
  categories     Category[]
  companyProfile CompanyProfile?
  customers      Customer[]
  dealers        Dealer[]
  invoices       Invoice[]
  memberships    Membership[]
  orders         Order[]
  variants       Variant[]
  subscriptions  Subscription?
  payments       OrderPayment[] // tenant üzerinden ödemeler

  @@index([createdById])
}

model Subscription {
  id                 String             @id @default(cuid())
  createdAt          DateTime           @default(now())
  updatedAt          DateTime           @updatedAt
  tenantId           String             @unique
  plan               Plan               @default(FREE)
  status             SubscriptionStatus @default(trialing)
  provider           String             @default("manual")
  providerCustomerId String?
  providerSubId      String?
  currentPeriodStart DateTime?
  currentPeriodEnd   DateTime?
  cancelAtPeriodEnd  Boolean            @default(false)
  seats              Int                @default(1)
  seatLimit          Int?
  trialEndsAt        DateTime?
  graceUntil         DateTime?

  tenant   Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  invoices Invoice[]

  @@index([tenantId, status])
  @@index([currentPeriodEnd])
}

model Invoice {
  id                String        @id @default(cuid())
  createdAt         DateTime      @default(now())
  tenantId          String
  subscriptionId    String?
  status            InvoiceStatus @default(open)
  amount            Decimal       @db.Decimal(12, 2)
  currency          String        @default("TRY")
  provider          String        @default("manual")
  providerInvoiceId String?
  raw               Json?
  paidAt            DateTime?
  dueAt             DateTime?

  subscription Subscription? @relation(fields: [subscriptionId], references: [id])
  tenant       Tenant        @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, createdAt])
  @@index([status])
}

/**
 * ============ Company / Branch / Dealer ============
 */
model CompanyProfile {
  id       String @id @default(cuid())
  tenantId String @unique
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  companyName String
  taxNumber   String?
  taxOffice   String?

  phone   String?
  email   String?
  address String?

  logoUrl   String?
  instagram String?
  website   String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([tenantId])
}

model Branch {
  id       String @id @default(cuid())
  tenantId String
  tenant   Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  name    String
  code    String?
  phone   String?
  email   String?
  address String?

  showOnHeader Boolean @default(false)
  sortOrder    Int     @default(0)

  isActive  Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // back-relation to Order.branch
  orders Order[]

  @@unique([tenantId, name])
  @@index([tenantId])
  @@index([tenantId, showOnHeader, sortOrder])
}

model Dealer {
  id        String   @id @default(cuid())
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  name         String
  code         String?
  phone        String?
  email        String? @db.VarChar(191)
  address      String?
  taxNumber    String?
  taxOffice    String?
  contactName  String?
  contactPhone String?
  notes        String?
  isActive     Boolean @default(true)

  logoHeight    Int?
  logoKey       String?   @db.VarChar(191)
  logoUpdatedAt DateTime?
  logoUrl       String?
  logoWidth     Int?

  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  // Sipariş artık Branch’e bağlı, Dealer ile Order ilişkisi yok.

  @@unique([tenantId, name])
  @@unique([tenantId, code])
  @@index([tenantId])
  @@index([tenantId, isActive])
}

/**
 * ============ Customer / Catalog ============
 */
model Customer {
  id        String   @id @default(cuid())
  tenantId  String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  name      String
  phone     String
  email     String?  @db.VarChar(191)
  address   String?
  note      String?

  tenant Tenant  @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orders Order[]

  @@unique([tenantId, phone])
  @@index([tenantId])
  @@index([tenantId, name])
}

model Category {
  id       String @id @default(cuid())
  tenantId String
  name     String

  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]
  variants   Variant[]

  @@unique([tenantId, name])
  @@index([tenantId])
}

model Variant {
  id         String  @id @default(cuid())
  tenantId   String
  name       String
  unitPrice  Decimal @default(0) @db.Decimal(12, 2)
  categoryId String

  category   Category    @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  tenant     Tenant      @relation(fields: [tenantId], references: [id], onDelete: Cascade)
  orderItems OrderItem[]

  @@unique([categoryId, name])
  @@index([tenantId])
  @@index([categoryId])
  @@index([name])
}

/**
 * ============ Orders ============
 */
model Order {
  id             String      @id @default(cuid())
  tenantId       String
  branchId       String
  createdAt      DateTime    @default(now())
  updatedAt      DateTime    @updatedAt
  note           String?
  total          Decimal     @default(0) @db.Decimal(12, 2)
  discount       Decimal     @default(0) @db.Decimal(12, 2)
  netTotal       Decimal     @default(0) @db.Decimal(12, 2)
  customerName   String      @default("")
  customerPhone  String      @default("")
  status         OrderStatus @default(pending)
  customerId     String?
  createdById    String?
  storLines      Json?
  accessoryLines Json?
  deletedAt      DateTime?
  deliveryAt     DateTime?

  // ✅ only Branch relation (no Dealer)
  branch    Branch    @relation(fields: [branchId], references: [id], onDelete: Restrict)
  customer  Customer? @relation(fields: [customerId], references: [id])
  createdBy User?     @relation("OrderCreatedBy", fields: [createdById], references: [id])
  tenant    Tenant    @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  extras   OrderExtra[]
  items    OrderItem[]
  payments OrderPayment[] // parçalı ödemeler

  @@index([tenantId, branchId, createdAt])
  @@index([tenantId, status, createdAt])
  @@index([tenantId, customerId])
  @@index([tenantId, customerName])
  @@index([tenantId, customerPhone])
  @@index([tenantId, createdById])
  @@index([tenantId, deletedAt])
  @@index([tenantId, deliveryAt])
}

model OrderItem {
  id          String  @id @default(cuid())
  orderId     String
  categoryId  String
  variantId   String
  qty         Int
  width       Int
  height      Int
  unitPrice   Decimal @default(0) @db.Decimal(12, 2)
  fileDensity Decimal @default(1) @db.Decimal(3, 1)
  subtotal    Decimal @default(0) @db.Decimal(12, 2)
  note        String?

  order    Order    @relation(fields: [orderId], references: [id], onDelete: Cascade)
  category Category @relation(fields: [categoryId], references: [id])
  variant  Variant  @relation(fields: [variantId], references: [id])

  slotIndex Int? // nullable; UI kutusu yoksa null

  lineStatus OrderLineStatus @default(processing)

  @@index([orderId])
  @@index([categoryId])
  @@index([variantId])
}

model OrderExtra {
  id        String    @id @default(cuid())
  orderId   String
  type      ExtraType
  text      String
  qty       Int       @default(1)
  unitPrice Decimal   @default(0) @db.Decimal(12, 2)
  subtotal  Decimal   @default(0) @db.Decimal(12, 2)
  note      String?
  createdAt DateTime  @default(now())

  order Order @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId, type])
}

/**
 * ============ Payments ============
 */
enum PaymentMethod {
  CASH // Nakit
  TRANSFER // Havale/EFT
  CARD // Kredi Kartı / POS
}

model OrderPayment {
  id       String        @id @default(cuid())
  tenantId String
  orderId  String
  method   PaymentMethod
  amount   Decimal       @db.Decimal(12, 2)
  paidAt   DateTime      @default(now())
  note     String?

  createdById String?
  // ⬇️ İSİMLİ RELATION: User.paymentsCreated ile eşleşiyor
  createdBy   User?   @relation("OrderPaymentCreatedBy", fields: [createdById], references: [id])

  order  Order  @relation(fields: [orderId], references: [id], onDelete: Cascade)
  tenant Tenant @relation(fields: [tenantId], references: [id], onDelete: Cascade)

  @@index([tenantId, orderId, paidAt])
  @@index([tenantId, paidAt])
}

model PasswordResetToken {
  id        String    @id @default(cuid())
  userId    String
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  tokenHash String    @unique
  expiresAt DateTime
  usedAt    DateTime?
  createdAt DateTime  @default(now())

  @@index([userId, expiresAt])
}

/**
 * ============ Enums ============
 */
enum UserRole {
  ADMIN
  STAFF
  SUPERADMIN
}

enum Plan {
  FREE
  PRO
}

enum SubscriptionStatus {
  trialing
  active
  past_due
  canceled
}

enum InvoiceStatus {
  open
  paid
  failed
  voided
  refunded
}

enum TenantRole {
  OWNER
  ADMIN
  STAFF
}

enum OrderStatus {
  pending
  processing
  completed
  cancelled
}

enum ExtraType {
  STOR
  ACCESSORY
}

enum OrderLineStatus {
  pending
  processing
  completed
  cancelled
}
